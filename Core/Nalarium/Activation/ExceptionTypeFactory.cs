#region Copyright
//+ Nalarium Pro 3.0 - Core Module
//+ Copyright © Jampad Technology, Inc. 2007-2010
#endregion
using System;
//+
namespace Nalarium.Activation
{
    /// <summary>
    /// Factory used to create exception type instances.
    /// </summary>
    public class ExceptionTypeFactory : TypeFactory
    {
        //- @CreateObject -//
        /// <summary>
        /// Creates an exception type based on type alias.
        /// </summary>
        /// <param name="text">Alias of the type.</param>
        /// <returns>Type of the exception.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
        public override Type CreateType(String text)
        {
            Type ex = null;
            switch (text)
            {
                case "system":
                    return TypeCache.InlineRegister(typeof(System.SystemException));
                case "outofmemory":
                    return TypeCache.InlineRegister(typeof(System.OutOfMemoryException));
                case "stackoverflow":
                    return TypeCache.InlineRegister(typeof(System.StackOverflowException));
                case "datamisaligned":
                    return TypeCache.InlineRegister(typeof(System.DataMisalignedException));
                case "executionengine":
                    return TypeCache.InlineRegister(typeof(System.ExecutionEngineException));
                case "memberaccess":
                    return TypeCache.InlineRegister(typeof(System.MemberAccessException));
                case "accessviolation":
                    return TypeCache.InlineRegister(typeof(System.AccessViolationException));
                case "application":
                    return TypeCache.InlineRegister(typeof(System.ApplicationException));
                case "appdomainunloaded":
                    return TypeCache.InlineRegister(typeof(System.AppDomainUnloadedException));
                case "argument":
                    return TypeCache.InlineRegister(typeof(System.ArgumentException));
                case "argumentnull":
                    return TypeCache.InlineRegister(typeof(System.ArgumentNullException));
                case "argumentoutofrange":
                    return TypeCache.InlineRegister(typeof(System.ArgumentOutOfRangeException));
                case "arithmetic":
                    return TypeCache.InlineRegister(typeof(System.ArithmeticException));
                case "arraytypemismatch":
                    return TypeCache.InlineRegister(typeof(System.ArrayTypeMismatchException));
                case "badimageformat":
                    return TypeCache.InlineRegister(typeof(System.BadImageFormatException));
                case "cannotunloadappdomain":
                    return TypeCache.InlineRegister(typeof(System.CannotUnloadAppDomainException));
                case "typeunloaded":
                    return TypeCache.InlineRegister(typeof(System.TypeUnloadedException));
                case "dividebyzero":
                    return TypeCache.InlineRegister(typeof(System.DivideByZeroException));
                case "duplicatewaitobject":
                    return TypeCache.InlineRegister(typeof(System.DuplicateWaitObjectException));
                case "typeload":
                    return TypeCache.InlineRegister(typeof(System.TypeLoadException));
                case "entrypointnotfound":
                    return TypeCache.InlineRegister(typeof(System.EntryPointNotFoundException));
                case "dllnotfound":
                    return TypeCache.InlineRegister(typeof(System.DllNotFoundException));
                case "fieldaccess":
                    return TypeCache.InlineRegister(typeof(System.FieldAccessException));
                case "format":
                    return TypeCache.InlineRegister(typeof(System.FormatException));
                case "indexoutofrange":
                    return TypeCache.InlineRegister(typeof(System.IndexOutOfRangeException));
                case "insufficientmemory":
                    return TypeCache.InlineRegister(typeof(System.InsufficientMemoryException));
                case "invalidcast":
                    return TypeCache.InlineRegister(typeof(System.InvalidCastException));
                case "invalidoperation":
                    return TypeCache.InlineRegister(typeof(System.InvalidOperationException));
                case "invalidprogram":
                    return TypeCache.InlineRegister(typeof(System.InvalidProgramException));
                case "methodaccess":
                    return TypeCache.InlineRegister(typeof(System.MethodAccessException));
                case "missingmember":
                    return TypeCache.InlineRegister(typeof(System.MissingMemberException));
                case "missingfield":
                    return TypeCache.InlineRegister(typeof(System.MissingFieldException));
                case "missingmethod":
                    return TypeCache.InlineRegister(typeof(System.MissingMethodException));
                case "multicastnotsupported":
                    return TypeCache.InlineRegister(typeof(System.MulticastNotSupportedException));
                case "notfinitenumber":
                    return TypeCache.InlineRegister(typeof(System.NotFiniteNumberException));
                case "notimplemented":
                    return TypeCache.InlineRegister(typeof(System.NotImplementedException));
                case "notsupported":
                    return TypeCache.InlineRegister(typeof(System.NotSupportedException));
                case "nullreference":
                    return TypeCache.InlineRegister(typeof(System.NullReferenceException));
                case "objectdisposed":
                    return TypeCache.InlineRegister(typeof(System.ObjectDisposedException));
                case "operationcanceled":
                    return TypeCache.InlineRegister(typeof(System.OperationCanceledException));
                case "overflow":
                    return TypeCache.InlineRegister(typeof(System.OverflowException));
                case "platformnotsupported":
                    return TypeCache.InlineRegister(typeof(System.PlatformNotSupportedException));
                case "rank":
                    return TypeCache.InlineRegister(typeof(System.RankException));
                case "timeout":
                    return TypeCache.InlineRegister(typeof(System.TimeoutException));
                case "typeinitialization":
                    return TypeCache.InlineRegister(typeof(System.TypeInitializationException));
                case "unauthorizedaccess":
                    return TypeCache.InlineRegister(typeof(System.UnauthorizedAccessException));
                case "abandonedmutex":
                    return TypeCache.InlineRegister(typeof(System.Threading.AbandonedMutexException));
                case "synchronizationlock":
                    return TypeCache.InlineRegister(typeof(System.Threading.SynchronizationLockException));
                case "threadabort":
                    return TypeCache.InlineRegister(typeof(System.Threading.ThreadAbortException));
                case "threadinterrupted":
                    return TypeCache.InlineRegister(typeof(System.Threading.ThreadInterruptedException));
                case "threadstate":
                    return TypeCache.InlineRegister(typeof(System.Threading.ThreadStateException));
                case "threadstart":
                    return TypeCache.InlineRegister(typeof(System.Threading.ThreadStartException));
                case "waithandlecannotbeopened":
                    return TypeCache.InlineRegister(typeof(System.Threading.WaitHandleCannotBeOpenedException));
                case "keynotfound":
                    return TypeCache.InlineRegister(typeof(System.Collections.Generic.KeyNotFoundException));
                case "ambiguousmatch":
                    return TypeCache.InlineRegister(typeof(System.Reflection.AmbiguousMatchException));
                case "customattributeformat":
                    return TypeCache.InlineRegister(typeof(System.Reflection.CustomAttributeFormatException));
                case "invalidfiltercriteria":
                    return TypeCache.InlineRegister(typeof(System.Reflection.InvalidFilterCriteriaException));
                case "reflectiontypeload":
                    return TypeCache.InlineRegister(typeof(System.Reflection.ReflectionTypeLoadException));
                case "target":
                    return TypeCache.InlineRegister(typeof(System.Reflection.TargetException));
                case "targetinvocation":
                    return TypeCache.InlineRegister(typeof(System.Reflection.TargetInvocationException));
                case "targetparametercount":
                    return TypeCache.InlineRegister(typeof(System.Reflection.TargetParameterCountException));
                case "serialization":
                    return TypeCache.InlineRegister(typeof(System.Runtime.Serialization.SerializationException));
                case "decoderfallback":
                    return TypeCache.InlineRegister(typeof(System.Text.DecoderFallbackException));
                case "encoderfallback":
                    return TypeCache.InlineRegister(typeof(System.Text.EncoderFallbackException));
                case "missingmanifestresource":
                    return TypeCache.InlineRegister(typeof(System.Resources.MissingManifestResourceException));
                case "missingsatelliteassembly":
                    return TypeCache.InlineRegister(typeof(System.Resources.MissingSatelliteAssemblyException));
                case "policy":
                    return TypeCache.InlineRegister(typeof(System.Security.Policy.PolicyException));
                case "external":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.ExternalException));
                case "com":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.COMException));
                case "invalidolevarianttype":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.InvalidOleVariantTypeException));
                case "marshaldirective":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.MarshalDirectiveException));
                case "seh":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.SEHException));
                case "invalidcomobject":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.InvalidComObjectException));
                case "safearrayrankmismatch":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.SafeArrayRankMismatchException));
                case "safearraytypemismatch":
                    return TypeCache.InlineRegister(typeof(System.Runtime.InteropServices.SafeArrayTypeMismatchException));
                case "io":
                    return TypeCache.InlineRegister(typeof(System.IO.IOException));
                case "directorynotfound":
                    return TypeCache.InlineRegister(typeof(System.IO.DirectoryNotFoundException));
                case "drivenotfound":
                    return TypeCache.InlineRegister(typeof(System.IO.DriveNotFoundException));
                case "endofstream":
                    return TypeCache.InlineRegister(typeof(System.IO.EndOfStreamException));
                case "fileload":
                    return TypeCache.InlineRegister(typeof(System.IO.FileLoadException));
                case "filenotfound":
                    return TypeCache.InlineRegister(typeof(System.IO.FileNotFoundException));
                case "pathtoolong":
                    return TypeCache.InlineRegister(typeof(System.IO.PathTooLongException));
                case "runtimewrapped":
                    return TypeCache.InlineRegister(typeof(System.Runtime.CompilerServices.RuntimeWrappedException));
                case "xmlsyntax":
                    return TypeCache.InlineRegister(typeof(System.Security.XmlSyntaxException));
                case "security":
                    return TypeCache.InlineRegister(typeof(System.Security.SecurityException));
                case "hostprotection":
                    return TypeCache.InlineRegister(typeof(System.Security.HostProtectionException));
                case "verification":
                    return TypeCache.InlineRegister(typeof(System.Security.VerificationException));
                case "remoting":
                    return TypeCache.InlineRegister(typeof(System.Runtime.Remoting.RemotingException));
                case "server":
                    return TypeCache.InlineRegister(typeof(System.Runtime.Remoting.ServerException));
                case "remotingtimeout":
                    return TypeCache.InlineRegister(typeof(System.Runtime.Remoting.RemotingTimeoutException));
                case "isolatedstorage":
                    return TypeCache.InlineRegister(typeof(System.IO.IsolatedStorage.IsolatedStorageException));
                case "cryptographic":
                    return TypeCache.InlineRegister(typeof(System.Security.Cryptography.CryptographicException));
                case "cryptographicunexpectedoperation":
                    return TypeCache.InlineRegister(typeof(System.Security.Cryptography.CryptographicUnexpectedOperationException));
                case "privilegenotheld":
                    return TypeCache.InlineRegister(typeof(System.Security.AccessControl.PrivilegeNotHeldException));
                case "identitynotmapped":
                    return TypeCache.InlineRegister(typeof(System.Security.Principal.IdentityNotMappedException));
                case "invalidasynchronousstate":
                    return TypeCache.InlineRegister(typeof(System.ComponentModel.InvalidAsynchronousStateException));
                case "invalidenumargument":
                    return TypeCache.InlineRegister(typeof(System.ComponentModel.InvalidEnumArgumentException));
                case "license":
                    return TypeCache.InlineRegister(typeof(System.ComponentModel.LicenseException));
                case "warning":
                    return TypeCache.InlineRegister(typeof(System.ComponentModel.WarningException));
                case "win32":
                    return TypeCache.InlineRegister(typeof(System.ComponentModel.Win32Exception));
                case "checkout":
                    return TypeCache.InlineRegister(typeof(System.ComponentModel.Design.CheckoutException));
                case "invaliddata":
                    return TypeCache.InlineRegister(typeof(System.IO.InvalidDataException));
                case "semaphorefull":
                    return TypeCache.InlineRegister(typeof(System.Threading.SemaphoreFullException));
                case "uriformat":
                    return TypeCache.InlineRegister(typeof(System.UriFormatException));
                case "cookie":
                    return TypeCache.InlineRegister(typeof(System.Net.CookieException));
                case "httplistener":
                    return TypeCache.InlineRegister(typeof(System.Net.HttpListenerException));
                case "protocolviolation":
                    return TypeCache.InlineRegister(typeof(System.Net.ProtocolViolationException));
                case "socket":
                    return TypeCache.InlineRegister(typeof(System.Net.Sockets.SocketException));
                case "web":
                    return TypeCache.InlineRegister(typeof(System.Net.WebException));
                case "authentication":
                    return TypeCache.InlineRegister(typeof(System.Security.Authentication.AuthenticationException));
                case "invalidcredential":
                    return TypeCache.InlineRegister(typeof(System.Security.Authentication.InvalidCredentialException));
                case "networkinformation":
                    return TypeCache.InlineRegister(typeof(System.Net.NetworkInformation.NetworkInformationException));
                case "ping":
                    return TypeCache.InlineRegister(typeof(System.Net.NetworkInformation.PingException));
                case "smtp":
                    return TypeCache.InlineRegister(typeof(System.Net.Mail.SmtpException));
                case "smtpfailedrecipient":
                    return TypeCache.InlineRegister(typeof(System.Net.Mail.SmtpFailedRecipientException));
                case "smtpfailedrecipients":
                    return TypeCache.InlineRegister(typeof(System.Net.Mail.SmtpFailedRecipientsException));
                case "configuration":
                    return TypeCache.InlineRegister(typeof(System.Configuration.ConfigurationException));
                case "settingspropertyisreadonly":
                    return TypeCache.InlineRegister(typeof(System.Configuration.SettingsPropertyIsReadOnlyException));
                case "settingspropertynotfound":
                    return TypeCache.InlineRegister(typeof(System.Configuration.SettingsPropertyNotFoundException));
                case "settingspropertywrongtype":
                    return TypeCache.InlineRegister(typeof(System.Configuration.SettingsPropertyWrongTypeException));
                case "internalbufferoverflow":
                    return TypeCache.InlineRegister(typeof(System.IO.InternalBufferOverflowException));
                case "configurationerrors":
                    return TypeCache.InlineRegister(typeof(System.Configuration.ConfigurationErrorsException));
                case "provider":
                    return TypeCache.InlineRegister(typeof(System.Configuration.Provider.ProviderException));
                case "data":
                    return TypeCache.InlineRegister(typeof(System.Data.DataException));
                case "constraint":
                    return TypeCache.InlineRegister(typeof(System.Data.ConstraintException));
                case "deletedrowinaccessible":
                    return TypeCache.InlineRegister(typeof(System.Data.DeletedRowInaccessibleException));
                case "duplicatename":
                    return TypeCache.InlineRegister(typeof(System.Data.DuplicateNameException));
                case "inrowchangingevent":
                    return TypeCache.InlineRegister(typeof(System.Data.InRowChangingEventException));
                case "invalidconstraint":
                    return TypeCache.InlineRegister(typeof(System.Data.InvalidConstraintException));
                case "missingprimarykey":
                    return TypeCache.InlineRegister(typeof(System.Data.MissingPrimaryKeyException));
                case "nonullallowed":
                    return TypeCache.InlineRegister(typeof(System.Data.NoNullAllowedException));
                case "readonly":
                    return TypeCache.InlineRegister(typeof(System.Data.ReadOnlyException));
                case "rownotintable":
                    return TypeCache.InlineRegister(typeof(System.Data.RowNotInTableException));
                case "versionnotfound":
                    return TypeCache.InlineRegister(typeof(System.Data.VersionNotFoundException));
                case "dbconcurrency":
                    return TypeCache.InlineRegister(typeof(System.Data.DBConcurrencyException));
                case "operationaborted":
                    return TypeCache.InlineRegister(typeof(System.Data.OperationAbortedException));
                case "strongtyping":
                    return TypeCache.InlineRegister(typeof(System.Data.StrongTypingException));
                case "typeddatasetgenerator":
                    return TypeCache.InlineRegister(typeof(System.Data.TypedDataSetGeneratorException));
                case "db":
                    return TypeCache.InlineRegister(typeof(System.Data.Common.DbException));
                case "invalidexpression":
                    return TypeCache.InlineRegister(typeof(System.Data.InvalidExpressionException));
                case "evaluate":
                    return TypeCache.InlineRegister(typeof(System.Data.EvaluateException));
                case "syntaxerror":
                    return TypeCache.InlineRegister(typeof(System.Data.SyntaxErrorException));
                case "odbc":
                    return TypeCache.InlineRegister(typeof(System.Data.Odbc.OdbcException));
                case "oledb":
                    return TypeCache.InlineRegister(typeof(System.Data.OleDb.OleDbException));
                case "invalidudt":
                    return TypeCache.InlineRegister(typeof(Microsoft.SqlServer.Server.InvalidUdtException));
                case "sql":
                    return TypeCache.InlineRegister(typeof(System.Data.SqlClient.SqlException));
                case "sqltype":
                    return TypeCache.InlineRegister(typeof(System.Data.SqlTypes.SqlTypeException));
                case "sqlnullvalue":
                    return TypeCache.InlineRegister(typeof(System.Data.SqlTypes.SqlNullValueException));
                case "sqltruncate":
                    return TypeCache.InlineRegister(typeof(System.Data.SqlTypes.SqlTruncateException));
                case "sqlnotfilled":
                    return TypeCache.InlineRegister(typeof(System.Data.SqlTypes.SqlNotFilledException));
                case "sqlalreadyfilled":
                    return TypeCache.InlineRegister(typeof(System.Data.SqlTypes.SqlAlreadyFilledException));
                case "xml":
                    return TypeCache.InlineRegister(typeof(System.Xml.XmlException));
                case "xpath":
                    return TypeCache.InlineRegister(typeof(System.Xml.XPath.XPathException));
                case "xslt":
                    return TypeCache.InlineRegister(typeof(System.Xml.Xsl.XsltException));
                case "xsltcompile":
                    return TypeCache.InlineRegister(typeof(System.Xml.Xsl.XsltCompileException));
                case "xmlschema":
                    return TypeCache.InlineRegister(typeof(System.Xml.Schema.XmlSchemaException));
                case "xmlschemavalidation":
                    return TypeCache.InlineRegister(typeof(System.Xml.Schema.XmlSchemaValidationException));
                case "xmlschemainference":
                    return TypeCache.InlineRegister(typeof(System.Xml.Schema.XmlSchemaInferenceException));
            }
            //+
            return ex;
        }
    }
}